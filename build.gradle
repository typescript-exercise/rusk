apply plugin: 'war'

ext.mainClass = 'rusk.RuskMain'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

ant.condition(property: "grunt", value: "grunt.cmd") { os(family: "windows") }
ant.condition(property: "grunt", value: "grunt"   ) { os(family: "unix") }

repositories {
    mavenCentral()
    maven { url 'http://public-maven.classmethod.info/release' }
    maven { url 'http://public-maven.classmethod.info/snapshot' }
}

dependencies {
    providedCompile 'org.eclipse.jetty.aggregate:jetty-all:9.2.1.v20140609'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.10.1'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.10.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-dbcp:commons-dbcp:1.4'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.6'
    compile 'org.hsqldb:hsqldb:2.3.2'
    compile 'org.flywaydb:flyway-core:3.0'
    compile files('lib/persist-1.1.1.jar')
    
    testCompile 'org.jmockit:jmockit:1.9'
    testCompile 'junit:junit:4.11', {
        transitive = false
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'jp.classmethod.testing:cmtest-db:0.4'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.10.1'
}

war {
    baseName = 'rusk'

    from {
        configurations.providedCompile.collect {
            it.isDirectory() ? it : project.zipTree(it)
        }
    }
    from fileTree(dir: 'build/classes/main', include: '**/*Main.class')
    
    manifest.attributes 'Main-Class': mainClass, 'Rusk-Release' : 'true'
}

tasks.war.doFirst {
    tasks.grunt.execute()
}

apply plugin: 'eclipse'
import org.gradle.plugins.ide.eclipse.model.SourceFolder 

eclipse {
    project {
        name = 'rusk'
        buildCommand 'com.palantir.typescript.typeScriptBuilder'
        natures 'com.palantir.typescript.typeScriptNature'
    }
    
    classpath {
        defaultOutputDir = file('src/main/webapp/WEB-INF/classes')
        
        file.whenMerged {cp ->
            cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test"
        }
    }
}

tasks.eclipse << {
    println file('.settings/com.palantir.typescript.prefs').withWriter {writer ->
        writer << """\
                  |build.path.sourceFolder=src/main/ts
                  |compiler.outputDirOption=bin/ts
                  |compiler.outputFileOption=
                  |eclipse.preferences.version=1
                  |""".stripMargin()
    }
}

apply plugin: 'application'

mainClassName = mainClass

tasks.run.doFirst {
    tasks.grunt.execute()
}

task grunt << {
    def cmd = "${ant.grunt} deploy".execute()
    
    def result = cmd.waitFor()
    
    println cmd.text
    
    if (result != 0) {
        throw new RuntimeException('failed to grunt')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
