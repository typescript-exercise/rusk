package rusk.persistence.task;

import static java.util.stream.Collectors.*;

import java.sql.Timestamp;
import java.util.List;
import java.util.function.Function;

import net.sf.persist.annotations.Column;
import net.sf.persist.annotations.Table;
import rusk.domain.task.Task;
import rusk.domain.task.WorkTime;

@Table(name="WORK_TIME")
public class WorkTimeTable {
    
    public Long id;
    public long taskId;
    public Timestamp startTime;
    public Timestamp endTime;
    public Timestamp updateDate;

    @Column(name="ID", autoGenerated=true)
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public long getTaskId() {
        return taskId;
    }
    public void setTaskId(long taskId) {
        this.taskId = taskId;
    }
    public Timestamp getStartTime() {
        return startTime;
    }
    public void setStartTime(Timestamp startTime) {
        this.startTime = startTime;
    }
    public Timestamp getEndTime() {
        return endTime;
    }
    public void setEndTime(Timestamp endTime) {
        this.endTime = endTime;
    }
    public Timestamp getUpdateDate() {
        return updateDate;
    }
    public void setUpdateDate(Timestamp updateDate) {
        this.updateDate = updateDate;
    }
    
    @Override
    public String toString() {
        return "WorkTimeTable [id=" + id + ", taskId=" + taskId + ", startTime=" + startTime + ", endTime=" + endTime + ", updateDate=" + updateDate + "]";
    }
    
    public static List<WorkTimeTable> createBy(Task task) {
        return task.getWorkTimes()
                    .stream()
                    .map(convertWith(task.getId()))
                    .collect(toList());
    }
    
    private static Function<WorkTime, WorkTimeTable> convertWith(long taskId) {
        return (workTime) -> {
            WorkTimeTable table = new WorkTimeTable();
            
            table.id = workTime.getId();
            table.taskId = taskId;
            table.startTime = new Timestamp(workTime.getStartTime().getTime());
            table.endTime = workTime.hasEndTime() ? new Timestamp(workTime.getEndTime().getTime()) : null;
            table.updateDate = new Timestamp(workTime.getUpdateDate().getTime());
            
            return table;
        };
    }
    
    public boolean hasEndTime() {
        return this.endTime != null;
    }
}
